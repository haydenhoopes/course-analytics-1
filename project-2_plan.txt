CANVAS LINK: https://canvas.instructure.com/doc/api/index.html
CANVAS LIVE INSTANCE: https://usu.instructure.com/login/canvas
token='1009~YfadrNgczvoB9ZWk2q9isEiCUwEzAXjiZfldkCmVJTmt6bICqc5jMXacV1rDYm1E'

********** PROJECT  PLAN **************
PRODUCT - A Flask server that displays several pages of course data:
	(1) Summary information about:
		(a) The course name                         # See 'hayden_functions.make_table'
		(b) The "workflow_state" of the course (ie unpublished or published)
			(i) If published == True, "(empty string)"; if unpublished, "No";
			    if anything else, "Yes"
		(c) Teachers names
		(d) Default View
		(e) Value of "has_syllabus" (Yes or No)
		(f) Total students enrolled
	(2) A paginated table with the same information as listed above.
		(a) The tables should include filters by college, department, and term


........... All data can be obtained from the "Courses In Account" API ...............
........... except for 'terms', which can be obtained from the "List   ...............
...........          Enrollment Terms" API                             ...............


Work In Process --- Project needs:
    1.  Structure - Server needs a nice login page with easily accessible dropdown lists and convenient navigation.
        Although a template has already been created, I may want to revisit it later to make minor
        changes.
    2.  Cache - There are three filter lists that need to be generated and easily accessible to the user
        as they are viewing the course data. These lists are generated by the API and should be
        relatively easy to get, but I should figure out a way to store them in the cache so as to not
        waste time and processing power re-booting them with every click.
    3.  Stats - Find a way to parse through the data and produce summary statistics by counting
        the number of "published" or "unpublished" courses, etc. and then display those stats at the top of page.
    4.  Links - Not all the data will be displayed at one time. Figure out how to parse the data and make a link
        to the next page appear when more than a certain number of items are available.
    5.  Errors - Allow error pages to compensate for bugs. Provide links to previous 'home' page.
    6.  Design - The stats and tables might need some pizazz in order to make them more easily readable. Perhaps
        R can help design this.
    7.  Return values - This should be given already, but make sure that the values are correctly returned from
        the HTML page into the python function. Might be time-consuming.

08/02/2019
Today I made the Terms list and the departments list, I organized everything so that those lists are cached
(it took forever) and ended trying to make a dictionary of department and ids that can be used to return a dept
string from the HTML, get its ID, and then run the api using that ID number.

08/05/2019
Today I rebuilt some of the formatting functions so that now the table only shows the required values and all
of the headers (keys) are correctly capitalized. I also played around a bit with the requests, I am confident
that I am including the "include" parameters correctly but for some reason only one of the values included in
the list of arguments is actually included in the data. I need to figure out how to get the whole list to work
without having to run the API a billion times and merge the data.

I also formatted a bit. Next time, I want to work on getting paginated data with a hyperlink at the bottom of
the page.

08/06/2019
Today I was able to paginate data and made a successful next button but wanted to also be
able to make a previous button. This is turning out to be more difficult than I initially
thought, and now my next button doesn't work. I'm trying to store the department choice in
the session along with the next URL and previous URL and the token. Tomorrow I should work
on getting this to work.

I also made the page WAAAY faster by only calling the API once in the dropdown function instead of parsing out
all of the subaccount IDs and then running it again.

Nevermind, before I left I figured it out!

Next, I should try to make a filter by enrollment term id that allows me to select a term to view. You can see
it on the Canvas API Documentation page linked at the top of this document.

08/07/2019
Today I made my pages flow really well and was able to make the page say 'Previous' when the page is not first,
'Next' when it's not the last page, and nothing at all when there aren't additional pages. It looks great! I also
got the term filter to work so that now data is super accessible very easily. I just need to format some things
and see if I can get some summary data at the top of the page.

TODO: After clicking 'Previous' or 'Next' page, if you reload the browser it sends a call for the next page again and changes pages.

I also need to replace the course code with the course name somehow.

08/08/2019
Today I made a new page that displays summary data, but I don't think the data I'm getting is correct.
I need to ask Meghan about it again on Monday but it turned out really well for one day's work.
I also made some moderate bug fixes to buttons that would error when clicked on before entering
a secret key.

09/25/2019
Today I was looking over the app for a while to familiarize myself again and I ended up fixing a bug on the summary
page that crashed the program when you changed the department and not the year. I also added assignments to the
summary stats page. For some reason the 'wiki' statistic isn't calculating correctly on MIS spring 2019.

09/26/2019
Fixed the bug that caused some stats to calculate incorrectly (the syntax said that if they had a syllabus not
to count them). I was trying to figure out how to get a syllabus hyperlink to be attached if "Yes" indicated
that the course did in fact have a syllabus, but couldn't get it to work so far.

10/02/2019
In the recent days, I have made quite a bit of headway on my project. I made a JavaScript function that filters
the drop down list of departments when you click on the associated college (it doesn't seem right though, the
"Science" college only has a single department-->"Science"). I also fixed something that was happening with
pagination and courses that had a quantity of courses that was a factor of 50 (Computer Science - 2019) where
the last page would crash because the "desired_items" (ie BASE_PARAMS: {'per_page': '50'}) was equal to the
number of items in the API response but there was no 'next' url in the links.

There is a minor problem that I tried to fix for about 10 minutes before focusing on more important matters--
the department returned to the select tag on the courses page after a POST request is alone. In other words,
a different department cannot be selected without reselected a college from the other list first. Kind of
annoying, but it won't crash anything.

10/03/2019
Today I made a checkbox that will let the user select if they want to see a table of only deleted courses.
Make Table line 27 not working, Pandas won't let me mix up the single and double quotes which is annoying.

MEGHAN'S ADVICE
10/10/2019
From accounts API, get SISID, regex data starts with 'COL'.
Use Python package 'beautifulsoup4' to parse through HTML data and automatically get links,
won't have to use a regular expression that might not work forever. Use Pip install to get it.
If I replace looping throught the dictionaries in the 'make' function, (lines 90 -  approx.)
Replace most of the parsing with pandas.io.json.json_normalize function, which will
take most of the headache of parsing away. 

BeautifulSoup notes
from bs4 import BeautifulSoup

pandas method loc and iloc to go through dataframe.


Tasks:
1.  Remove links to syllabi on the course table, but leave the structure there in case.
2.  Clean up all of the loops and use pandas to make a dataFrame that is easier to use.
3.  Make all of the course names into links to the courses.


PROJECT FOR TOMORROW: TODO
Turn the "courses.py" page into many pages that redirect between each other in order to prevent re-POSTing on refresh.
Start with a "home.py" page that just redirects to home.html or something which just has the drop down lists.
If the user selects to see the courses, the form will submit to a 'get_courses.py' page which will request the
data as usual. This data will be passed down and returned to html page called "courses.html". If the user had selected
to see department data, they will get directed to a different page. Each html file will have to have the dropdown lists
manually included (unless you can figure out a way to include it in the layout.html page).

10/21/2019
Today I finished up with the "remodeling" that fixed the re POST of forms when there is a page
refresh. It works by storing the current page number in the session and then getting the current page +1
if the user clicks next and -1 if they click previous. The function compares the two numbers and will run the API
call accordingly.

I also remade the error pages to make more efficient logins and smoother transitions from login errors back to
the login page. I checked as many of the possible combinations of clicks and the entire program seems to be 
pretty stable. It does lack some formatting though, but I'm not sure how important any of that sort of thing is.

Other than that, the program is ready to go until I get further specifications!


11/01/2019
Today I put finishing touches on the project. I've redesigned the Pandas dataframe to be div tables instead so that
it can be expanded. The user can click on "Get Assignment Details" or something like that and a row immediately below
will be expanded. There is a function to call the API and return data but I need to ask Meghan about it. It seems like
the function is written correctly but won't work because of CORS authentication issues. I also changed the logout button
to be a simple redirect instead of returning a whole value to the courses page through a form, it's just easier.

The coolest thing I did today was add a Google chart to the summary page, now you can see a pie chart alongside a nice
table with information about an entire department during a semester. It looks slick, although it goes a little weird
if you are using have of a window. I also made a loader that fires when the Get Summary button is clicked to warn the
user that loading may take several minutes.

11/14/2019
Today I finished this flask project. There are comments throughout the code to guide a user through my thought process.
Looking forward to the next project.
